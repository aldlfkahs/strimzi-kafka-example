apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: kafka
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-credentials
              key: mysql_password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mycnf
          mountPath: /etc/mysql/my.cnf
          subPath: my.cnf
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mycnf
        configMap:
          name: mysql-config
          items:
          - key: my.cnf
            path: my.cnf
      - name: mysql-initdb
        configMap:
          name: mysql-config
          items:
          - key: initdb.sql
            path: initdb.sql
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: kafka
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-credentials
  namespace: kafka
type: Opaque
data:
  mysql_username: cm9vdA==
  mysql_password: bXlwYXNzd29yZA==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: kafka
data:
  my.cnf: |
    [mysqld]
    log-bin=mysql-bin
    max_binlog_size=1G
    expire_logs_days=30 
  initdb.sql: |
    SET GLOBAL binlog_format = 'ROW';
    SET GLOBAL server_id = 184054;
    CREATE DATABASE test;
    use test;
    CREATE TABLE example (id INT(16) NOT NULL, name VARCHAR(32));
    INSERT INTO example VALUES (123, 'tmax');
